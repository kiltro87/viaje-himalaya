/**
 * Sistema de Logging y Trazabilidad Completo
 * 
 * Categor√≠as de Trazas:
 * - üöÄ INIT: Inicializaci√≥n de componentes y aplicaci√≥n
 * - üìä DATA: Operaciones con datos (CRUD, transformaciones)
 * - üé® UI: Renderizado y actualizaciones de interfaz
 * - üîÑ EVENT: Eventos de usuario y navegaci√≥n
 * - üó∫Ô∏è MAP: Operaciones espec√≠ficas del mapa
 * - üí∞ BUDGET: Operaciones de presupuesto y gastos
 * - üì± RESPONSIVE: Adaptaciones responsive y breakpoints
 * - ‚ö†Ô∏è WARNING: Advertencias y situaciones inesperadas
 * - ‚ùå ERROR: Errores y excepciones
 * - ‚úÖ SUCCESS: Operaciones completadas exitosamente
 * - üîç DEBUG: Informaci√≥n de depuraci√≥n detallada
 * - üìà PERFORMANCE: M√©tricas de rendimiento
 */

class Logger {
    constructor() {
        // Detectar si estamos en m√≥vil para reducir logging
        this.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        this.isEnabled = true;
        this.logLevel = this.isMobile ? 'ERROR' : 'DEBUG'; // Menos logging en m√≥vil
        this.categories = {
            INIT: { emoji: 'üöÄ', color: '#3B82F6', enabled: true },
            DATA: { emoji: 'üìä', color: '#10B981', enabled: true },
            UI: { emoji: 'üé®', color: '#8B5CF6', enabled: true },
            EVENT: { emoji: 'üîÑ', color: '#F59E0B', enabled: true },
            MAP: { emoji: 'üó∫Ô∏è', color: '#06B6D4', enabled: true },
            BUDGET: { emoji: 'üí∞', color: '#059669', enabled: true },
            RESPONSIVE: { emoji: 'üì±', color: '#EC4899', enabled: true },
            WARNING: { emoji: '‚ö†Ô∏è', color: '#F59E0B', enabled: true },
            ERROR: { emoji: '‚ùå', color: '#EF4444', enabled: true },
            SUCCESS: { emoji: '‚úÖ', color: '#10B981', enabled: true },
            DEBUG: { emoji: 'üîç', color: '#6B7280', enabled: true },
            PERFORMANCE: { emoji: 'üìà', color: '#7C3AED', enabled: true }
        };
        
        this.startTime = Date.now();
        this.performanceMarks = new Map();
    }

    /**
     * Log gen√©rico con categor√≠a
     */
    log(category, message, data = null, level = 'INFO') {
        if (!this.isEnabled || !this.categories[category]?.enabled) return;
        
        const categoryInfo = this.categories[category];
        const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
        const elapsed = Date.now() - this.startTime;
        
        const logMessage = `${categoryInfo.emoji} [${category}] ${message}`;
        
        // Aplicar color en consola si es posible
        if (typeof window !== 'undefined' && window.console) {
            console.log(
                `%c${logMessage} %c(+${elapsed}ms)`,
                `color: ${categoryInfo.color}; font-weight: bold;`,
                'color: #6B7280; font-size: 0.8em;',
                data || ''
            );
        } else {
            console.log(`${timestamp} ${logMessage} (+${elapsed}ms)`, data || '');
        }
    }

    // M√©todos espec√≠ficos por categor√≠a
    init(message, data) { this.log('INIT', message, data); }
    data(message, data) { this.log('DATA', message, data); }
    ui(message, data) { this.log('UI', message, data); }
    event(message, data) { this.log('EVENT', message, data); }
    map(message, data) { this.log('MAP', message, data); }
    budget(message, data) { this.log('BUDGET', message, data); }
    responsive(message, data) { this.log('RESPONSIVE', message, data); }
    warning(message, data) { this.log('WARNING', message, data, 'WARNING'); }
    error(message, data) { this.log('ERROR', message, data, 'ERROR'); }
    success(message, data) { this.log('SUCCESS', message, data); }
    debug(message, data) { this.log('DEBUG', message, data, 'DEBUG'); }
    
    /**
     * Sistema de m√©tricas de rendimiento
     */
    startPerformance(markName) {
        this.performanceMarks.set(markName, Date.now());
        this.log('PERFORMANCE', `Started: ${markName}`);
    }
    
    endPerformance(markName) {
        const startTime = this.performanceMarks.get(markName);
        if (startTime) {
            const duration = Date.now() - startTime;
            this.performanceMarks.delete(markName);
            this.log('PERFORMANCE', `Completed: ${markName} in ${duration}ms`, { duration });
            return duration;
        }
        return null;
    }

    /**
     * Logging de operaciones CRUD
     */
    crud(operation, entity, data) {
        const operations = {
            CREATE: '‚ûï',
            READ: 'üëÅÔ∏è',
            UPDATE: '‚úèÔ∏è',
            DELETE: 'üóëÔ∏è'
        };
        this.data(`${operations[operation]} ${operation} ${entity}`, data);
    }

    /**
     * Logging de navegaci√≥n
     */
    navigation(from, to, data) {
        this.event(`Navigation: ${from} ‚Üí ${to}`, data);
    }

    /**
     * Logging de responsive breakpoints
     */
    breakpoint(breakpoint, action) {
        this.responsive(`Breakpoint ${breakpoint}: ${action}`);
    }

    /**
     * Configuraci√≥n din√°mica
     */
    configure(options) {
        if (options.enabled !== undefined) this.isEnabled = options.enabled;
        if (options.logLevel) this.logLevel = options.logLevel;
        if (options.categories) {
            Object.keys(options.categories).forEach(cat => {
                if (this.categories[cat]) {
                    this.categories[cat].enabled = options.categories[cat];
                }
            });
        }
    }

    /**
     * Resumen de rendimiento
     */
    getPerformanceSummary() {
        const totalTime = Date.now() - this.startTime;
        return {
            totalRuntime: totalTime,
            activeMarks: Array.from(this.performanceMarks.keys()),
            timestamp: new Date().toISOString()
        };
    }
}

// Crear instancia global del logger
const loggerInstance = new Logger();

// Configuraci√≥n por defecto para desarrollo
if (typeof window !== 'undefined') {
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        loggerInstance.configure({
            enabled: true,
            logLevel: 'DEBUG'
        });
    } else {
        // Configuraci√≥n para producci√≥n
        loggerInstance.configure({
            enabled: true,
            logLevel: 'WARNING',
            categories: {
                DEBUG: false,
                PERFORMANCE: false
            }
        });
    }
    
    // Tambi√©n disponible globalmente
    window.Logger = loggerInstance;
}

export default loggerInstance;
